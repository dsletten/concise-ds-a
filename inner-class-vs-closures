  Closures vs. methods
  - A method on an object is visible to any other object (moderated by access modifiers--private,
    protected, public--in some langs). A closure passed from one object to another
    is entirely private. For example, a DOUBLY-LINKED-LIST could expose a HEAD-NODE method. Instead
    it passes a closure to its associated DCURSOR. This gives read-only access to the DCURSOR only.
  - A closure can be a side door to provide controlled access from one object to another. The
    front door API is available to everyone but requires a reference to an object. That reference
    also opens up the back door via SLOT-VALUE. But a closure limits access.
  - No inheritanct w/ closures. Is this the same general issue between functions vs. generic functions?
  - Inheritance flow is inverted?
    Previously, subclass implemented specific iterator behavior. Now superclass holds generic behavior
    that is customized based on slots that it holds.
    Example: ITERATOR < MUTABLE-COLLECTION-ITERATOR < RANDOM-ACCESS-LIST-ITERATOR
    CURRENT method
         MUT :AROUND -> I :AROUND -> RAND primary

    Now
         MUT :AROUND -> I :AROUND -> DONE slot (closure)
    
